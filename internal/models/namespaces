package models

type NamespaceObservable interface {
	Register(observers ...NamespaceObserver) error
	Deregister(observer NamespaceObserver) error
	notifyItemsChanged()
	notifyCurrentItemChanged(int)
}

type NamespaceObserver interface {
	GetName() string
	UpdateItems([]*kubernetes.Namespace) error
	UpdateSelected(*kubernetes.Namespaces, int) error
}

type Namespaces struct {
	ObserverList   []NamespaceObserver
	Items          []*kubernetes.Namespace
	CurrentItemIdx int
}

func (p *Namespaces) Register(observers ...NamespaceObserver) error {
	for _, o := range observers {
		err := p.register(o)
		if err != nil {
			return fmt.Errorf("Failed to register observer: %v\n", o)
		}
	}
	return nil
}

func (p *Namespaces) register(observer NamespaceObserver) error {
	p.ObserverList = append(p.ObserverList, observer)
	return nil
}

func (p *Namespaces) Deregister(observer NamespaceObserver) error {
	p.ObserverList = removeFromslice(p.ObserverList, observer)
	return nil
}

func (p *Namespaces) notifyItemsChanged() {
	for _, observer := range p.ObserverList {
		observer.UpdateItems(p.Items)
	}
}

func (p *Namespaces) notifyCurrentItemChanged(dy int) {
	for _, observer := range p.ObserverList {
		observer.UpdateSelected(p.GetSelected(), dy)
	}
}

func removeFromslice(observerList []NamespaceObserver, observerToRemove NamespaceObserver) []NamespaceObserver {
	observerListLength := len(observerList)
	for i, observer := range observerList {
		if observerToRemove.GetName() == observer.GetName() {
			observerList[observerListLength-1], observerList[i] = observerList[i], observerList[observerListLength-1]
			return observerList[:observerListLength-1]
		}
	}
	return observerList
}
